{
  "uid" : "b4024187766dd45c",
  "name" : "test_run[run_case0]",
  "fullName" : "testcase.TestKeywords.TestKeyword#test_run[run_case0]",
  "historyId" : "1b1458eb6c9578bbae1b78493d33e22c",
  "time" : {
    "start" : 1588773491198,
    "stop" : 1588773491198,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'platfromVersion'",
  "statusTrace" : "cmdopt = \"{'host': '127.0.0.1', 'port': '4723', 'bpport': '4724', 'udid': '192.168.56.104:5555', 'systemPort': 8200, 'name': '华为mate9'}\"\n\n    @pytest.fixture(scope=\"session\")\n    def start_appium_desired(cmdopt):\n        opt = eval(cmdopt)\n        # { \"host\":\"127.0.0.1\",\n        #          \"port\":\"4723\",\n        #          \"bpport\":\"4724\",\n        #         \"udid\":None}\n        host = opt[\"host\"]\n        port = opt[\"port\"]\n        bpport = opt[\"bpport\"]\n        udid = opt[\"udid\"]\n        system_port = opt[\"systemPort\"]\n        # print(opt)\n        driver = None\n        # if udid in get_devices():\n        #     appium_start(host,port,bpport,udid)\n        #     time.sleep(5)\n        #     if not check_port():\n        #         driver = appium_desired_caps(host,port,system_port)\n        if not check_port(host, port):\n>           driver = appium_desired_caps(host, port, system_port)\n\ntestcase\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhost = '127.0.0.1', port = '4723', systemPort = 8200\n\n    def appium_desired_caps(host, port, systemPort=\"8200\"):\n        # 2、desired创建字典\n        desired_caps = dict()\n        # 3、platformName\n        desired_caps['platformName'] = data['platformName']\n        # 4、platformVersion\n>       desired_caps['platfromVersion'] = data['platfromVersion']\nE       KeyError: 'platfromVersion'\n\nbase\\DesireCaps.py:19: KeyError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "start_appium_desired",
    "time" : {
      "start" : 1588773491200,
      "stop" : 1588773491200,
      "duration" : 0
    },
    "status" : "broken",
    "statusMessage" : "KeyError: 'platfromVersion'\n",
    "statusTrace" : "  File \"C:\\Users\\cjj\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\cjj\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\_pytest\\fixtures.py\", line 937, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\cjj\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\_pytest\\fixtures.py\", line 790, in call_fixture_func\n    res = next(it)\n  File \"C:\\Users\\cjj\\PycharmProjects\\Appium_AutoTest\\testcase\\conftest.py\", line 39, in start_appium_desired\n    driver = appium_desired_caps(host, port, system_port)\n  File \"C:\\Users\\cjj\\PycharmProjects\\Appium_AutoTest\\base\\DesireCaps.py\", line 19, in appium_desired_caps\n    desired_caps['platfromVersion'] = data['platfromVersion']\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  }, {
    "name" : "cmdopt",
    "time" : {
      "start" : 1588773491200,
      "stop" : 1588773491200,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'platfromVersion'",
    "statusTrace" : "cmdopt = \"{'host': '127.0.0.1', 'port': '4723', 'bpport': '4724', 'udid': '192.168.56.104:5555', 'systemPort': 8200, 'name': '华为mate9'}\"\n\n    @pytest.fixture(scope=\"session\")\n    def start_appium_desired(cmdopt):\n        opt = eval(cmdopt)\n        # { \"host\":\"127.0.0.1\",\n        #          \"port\":\"4723\",\n        #          \"bpport\":\"4724\",\n        #         \"udid\":None}\n        host = opt[\"host\"]\n        port = opt[\"port\"]\n        bpport = opt[\"bpport\"]\n        udid = opt[\"udid\"]\n        system_port = opt[\"systemPort\"]\n        # print(opt)\n        driver = None\n        # if udid in get_devices():\n        #     appium_start(host,port,bpport,udid)\n        #     time.sleep(5)\n        #     if not check_port():\n        #         driver = appium_desired_caps(host,port,system_port)\n        if not check_port(host, port):\n>           driver = appium_desired_caps(host, port, system_port)\n\ntestcase\\conftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhost = '127.0.0.1', port = '4723', systemPort = 8200\n\n    def appium_desired_caps(host, port, systemPort=\"8200\"):\n        # 2、desired创建字典\n        desired_caps = dict()\n        # 3、platformName\n        desired_caps['platformName'] = data['platformName']\n        # 4、platformVersion\n>       desired_caps['platfromVersion'] = data['platfromVersion']\nE       KeyError: 'platfromVersion'\n\nbase\\DesireCaps.py:19: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6791556bb76ae4b",
      "name" : "log",
      "source" : "6791556bb76ae4b.txt",
      "type" : "text/plain",
      "size" : 58
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "TestKeywords"
  }, {
    "name" : "subSuite",
    "value" : "TestKeyword"
  }, {
    "name" : "host",
    "value" : "DESKTOP-0LL74L3"
  }, {
    "name" : "thread",
    "value" : "7752-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.TestKeywords"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "run_case",
    "value" : "{'TC_ID': 'TC_Login', 'CASE_ID': 'Case_001', '是否运行': 'y', '用例名称': '登录失败', '测试数据': 'username=13718418220,password=123456', '期望结果': '密码错误', '备注': '登录功能测试', '描述': '登录功能测试'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b4024187766dd45c.json",
  "parameterValues" : [ "{'TC_ID': 'TC_Login', 'CASE_ID': 'Case_001', '是否运行': 'y', '用例名称': '登录失败', '测试数据': 'username=13718418220,password=123456', '期望结果': '密码错误', '备注': '登录功能测试', '描述': '登录功能测试'}" ]
}